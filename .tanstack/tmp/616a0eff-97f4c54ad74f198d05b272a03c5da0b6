/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as appSearchRouteImport } from './routes/(app)/search'
import { Route as appProfileRouteRouteImport } from './routes/(app)/profile/route'
import { Route as appProfileIndexRouteImport } from './routes/(app)/profile/index'
import { Route as appProfileExperienceRouteImport } from './routes/(app)/profile/experience'
import { Route as appProfileArticlesRouteImport } from './routes/(app)/profile/articles'
import { Route as appProfileProjectsIndexRouteImport } from './routes/(app)/profile/projects/index'
import { Route as appusersUsernameIndexRouteImport } from './routes/(app)/(users)/$username/index'
import { Route as appProfileProjectsProjectIdRouteImport } from './routes/(app)/profile/projects/$projectId'

const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const appSearchRoute = appSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => appRouteRoute,
} as any)
const appProfileRouteRoute = appProfileRouteRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => appRouteRoute,
} as any)
const appProfileIndexRoute = appProfileIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appProfileRouteRoute,
} as any)
const appProfileExperienceRoute = appProfileExperienceRouteImport.update({
  id: '/experience',
  path: '/experience',
  getParentRoute: () => appProfileRouteRoute,
} as any)
const appProfileArticlesRoute = appProfileArticlesRouteImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => appProfileRouteRoute,
} as any)
const appProfileProjectsIndexRoute = appProfileProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => appProfileRouteRoute,
} as any)
const appusersUsernameIndexRoute = appusersUsernameIndexRouteImport.update({
  id: '/(users)/$username/',
  path: '/$username/',
  getParentRoute: () => appRouteRoute,
} as any)
const appProfileProjectsProjectIdRoute =
  appProfileProjectsProjectIdRouteImport.update({
    id: '/projects/$projectId',
    path: '/projects/$projectId',
    getParentRoute: () => appProfileRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/profile': typeof appProfileRouteRouteWithChildren
  '/search': typeof appSearchRoute
  '/login': typeof authLoginRoute
  '/profile/articles': typeof appProfileArticlesRoute
  '/profile/experience': typeof appProfileExperienceRoute
  '/profile/': typeof appProfileIndexRoute
  '/profile/projects/$projectId': typeof appProfileProjectsProjectIdRoute
  '/$username': typeof appusersUsernameIndexRoute
  '/profile/projects': typeof appProfileProjectsIndexRoute
}
export interface FileRoutesByTo {
  '/search': typeof appSearchRoute
  '/login': typeof authLoginRoute
  '/': typeof appIndexRoute
  '/profile/articles': typeof appProfileArticlesRoute
  '/profile/experience': typeof appProfileExperienceRoute
  '/profile': typeof appProfileIndexRoute
  '/profile/projects/$projectId': typeof appProfileProjectsProjectIdRoute
  '/$username': typeof appusersUsernameIndexRoute
  '/profile/projects': typeof appProfileProjectsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/(app)/profile': typeof appProfileRouteRouteWithChildren
  '/(app)/search': typeof appSearchRoute
  '/(auth)/login': typeof authLoginRoute
  '/(app)/': typeof appIndexRoute
  '/(app)/profile/articles': typeof appProfileArticlesRoute
  '/(app)/profile/experience': typeof appProfileExperienceRoute
  '/(app)/profile/': typeof appProfileIndexRoute
  '/(app)/profile/projects/$projectId': typeof appProfileProjectsProjectIdRoute
  '/(app)/(users)/$username/': typeof appusersUsernameIndexRoute
  '/(app)/profile/projects/': typeof appProfileProjectsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/profile'
    | '/search'
    | '/login'
    | '/profile/articles'
    | '/profile/experience'
    | '/profile/'
    | '/profile/projects/$projectId'
    | '/$username'
    | '/profile/projects'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/search'
    | '/login'
    | '/'
    | '/profile/articles'
    | '/profile/experience'
    | '/profile'
    | '/profile/projects/$projectId'
    | '/$username'
    | '/profile/projects'
  id:
    | '__root__'
    | '/(app)'
    | '/(app)/profile'
    | '/(app)/search'
    | '/(auth)/login'
    | '/(app)/'
    | '/(app)/profile/articles'
    | '/(app)/profile/experience'
    | '/(app)/profile/'
    | '/(app)/profile/projects/$projectId'
    | '/(app)/(users)/$username/'
    | '/(app)/profile/projects/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/search': {
      id: '/(app)/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof appSearchRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/profile': {
      id: '/(app)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof appProfileRouteRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/profile/': {
      id: '/(app)/profile/'
      path: '/'
      fullPath: '/profile/'
      preLoaderRoute: typeof appProfileIndexRouteImport
      parentRoute: typeof appProfileRouteRoute
    }
    '/(app)/profile/experience': {
      id: '/(app)/profile/experience'
      path: '/experience'
      fullPath: '/profile/experience'
      preLoaderRoute: typeof appProfileExperienceRouteImport
      parentRoute: typeof appProfileRouteRoute
    }
    '/(app)/profile/articles': {
      id: '/(app)/profile/articles'
      path: '/articles'
      fullPath: '/profile/articles'
      preLoaderRoute: typeof appProfileArticlesRouteImport
      parentRoute: typeof appProfileRouteRoute
    }
    '/(app)/profile/projects/': {
      id: '/(app)/profile/projects/'
      path: '/projects'
      fullPath: '/profile/projects'
      preLoaderRoute: typeof appProfileProjectsIndexRouteImport
      parentRoute: typeof appProfileRouteRoute
    }
    '/(app)/(users)/$username/': {
      id: '/(app)/(users)/$username/'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof appusersUsernameIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/profile/projects/$projectId': {
      id: '/(app)/profile/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/profile/projects/$projectId'
      preLoaderRoute: typeof appProfileProjectsProjectIdRouteImport
      parentRoute: typeof appProfileRouteRoute
    }
  }
}

interface appProfileRouteRouteChildren {
  appProfileArticlesRoute: typeof appProfileArticlesRoute
  appProfileExperienceRoute: typeof appProfileExperienceRoute
  appProfileIndexRoute: typeof appProfileIndexRoute
  appProfileProjectsProjectIdRoute: typeof appProfileProjectsProjectIdRoute
  appProfileProjectsIndexRoute: typeof appProfileProjectsIndexRoute
}

const appProfileRouteRouteChildren: appProfileRouteRouteChildren = {
  appProfileArticlesRoute: appProfileArticlesRoute,
  appProfileExperienceRoute: appProfileExperienceRoute,
  appProfileIndexRoute: appProfileIndexRoute,
  appProfileProjectsProjectIdRoute: appProfileProjectsProjectIdRoute,
  appProfileProjectsIndexRoute: appProfileProjectsIndexRoute,
}

const appProfileRouteRouteWithChildren = appProfileRouteRoute._addFileChildren(
  appProfileRouteRouteChildren,
)

interface appRouteRouteChildren {
  appProfileRouteRoute: typeof appProfileRouteRouteWithChildren
  appSearchRoute: typeof appSearchRoute
  appIndexRoute: typeof appIndexRoute
  appusersUsernameIndexRoute: typeof appusersUsernameIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appProfileRouteRoute: appProfileRouteRouteWithChildren,
  appSearchRoute: appSearchRoute,
  appIndexRoute: appIndexRoute,
  appusersUsernameIndexRoute: appusersUsernameIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
